// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package base

import (
	"bytes"
	"fmt"
	"gitlab.kingbay-tech.com/engine-lottery/magneto/pkg/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - LogId
//  - Caller
type Trace struct {
  LogId string `thrift:"logId,1,required" db:"logId" json:"logId"`
  Caller string `thrift:"caller,2,required" db:"caller" json:"caller"`
}

func NewTrace() *Trace {
  return &Trace{}
}


func (p *Trace) GetLogId() string {
  return p.LogId
}

func (p *Trace) GetCaller() string {
  return p.Caller
}
func (p *Trace) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetLogId bool = false;
  var issetCaller bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetLogId = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetCaller = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetLogId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LogId is not set"));
  }
  if !issetCaller{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Caller is not set"));
  }
  return nil
}

func (p *Trace)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LogId = v
}
  return nil
}

func (p *Trace)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Caller = v
}
  return nil
}

func (p *Trace) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Trace"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Trace) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("logId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:logId: ", p), err) }
  if err := oprot.WriteString(string(p.LogId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.logId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:logId: ", p), err) }
  return err
}

func (p *Trace) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("caller", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:caller: ", p), err) }
  if err := oprot.WriteString(string(p.Caller)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.caller (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:caller: ", p), err) }
  return err
}

func (p *Trace) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Trace(%+v)", *p)
}

// Attributes:
//  - Version
//  - Timestamp
//  - Signature
//  - Token
type MarsHeader struct {
  Version int8 `thrift:"version,1,required" db:"version" json:"version"`
  Timestamp int64 `thrift:"timestamp,2,required" db:"timestamp" json:"timestamp"`
  Signature string `thrift:"signature,3,required" db:"signature" json:"signature"`
  Token *string `thrift:"token,4" db:"token" json:"token,omitempty"`
}

func NewMarsHeader() *MarsHeader {
  return &MarsHeader{}
}


func (p *MarsHeader) GetVersion() int8 {
  return p.Version
}

func (p *MarsHeader) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *MarsHeader) GetSignature() string {
  return p.Signature
}
var MarsHeader_Token_DEFAULT string
func (p *MarsHeader) GetToken() string {
  if !p.IsSetToken() {
    return MarsHeader_Token_DEFAULT
  }
return *p.Token
}
func (p *MarsHeader) IsSetToken() bool {
  return p.Token != nil
}

func (p *MarsHeader) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetVersion bool = false;
  var issetTimestamp bool = false;
  var issetSignature bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetVersion = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetTimestamp = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetSignature = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"));
  }
  if !issetTimestamp{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Timestamp is not set"));
  }
  if !issetSignature{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Signature is not set"));
  }
  return nil
}

func (p *MarsHeader)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := int8(v)
  p.Version = temp
}
  return nil
}

func (p *MarsHeader)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *MarsHeader)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Signature = v
}
  return nil
}

func (p *MarsHeader)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Token = &v
}
  return nil
}

func (p *MarsHeader) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MarsHeader"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MarsHeader) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.BYTE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteByte(int8(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *MarsHeader) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err) }
  return err
}

func (p *MarsHeader) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("signature", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:signature: ", p), err) }
  if err := oprot.WriteString(string(p.Signature)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.signature (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:signature: ", p), err) }
  return err
}

func (p *MarsHeader) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetToken() {
    if err := oprot.WriteFieldBegin("token", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:token: ", p), err) }
    if err := oprot.WriteString(string(*p.Token)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.token (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:token: ", p), err) }
  }
  return err
}

func (p *MarsHeader) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MarsHeader(%+v)", *p)
}

// Attributes:
//  - Apiname
//  - Action
//  - Header
//  - Body
type MarsRequest struct {
  Apiname string `thrift:"apiname,1,required" db:"apiname" json:"apiname"`
  Action int64 `thrift:"action,2,required" db:"action" json:"action"`
  Header *MarsHeader `thrift:"header,3,required" db:"header" json:"header"`
  Body string `thrift:"body,4,required" db:"body" json:"body"`
}

func NewMarsRequest() *MarsRequest {
  return &MarsRequest{}
}


func (p *MarsRequest) GetApiname() string {
  return p.Apiname
}

func (p *MarsRequest) GetAction() int64 {
  return p.Action
}
var MarsRequest_Header_DEFAULT *MarsHeader
func (p *MarsRequest) GetHeader() *MarsHeader {
  if !p.IsSetHeader() {
    return MarsRequest_Header_DEFAULT
  }
return p.Header
}

func (p *MarsRequest) GetBody() string {
  return p.Body
}
func (p *MarsRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *MarsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetApiname bool = false;
  var issetAction bool = false;
  var issetHeader bool = false;
  var issetBody bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetApiname = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetAction = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetHeader = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetBody = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetApiname{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Apiname is not set"));
  }
  if !issetAction{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Action is not set"));
  }
  if !issetHeader{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Header is not set"));
  }
  if !issetBody{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Body is not set"));
  }
  return nil
}

func (p *MarsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Apiname = v
}
  return nil
}

func (p *MarsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Action = v
}
  return nil
}

func (p *MarsRequest)  ReadField3(iprot thrift.TProtocol) error {
  p.Header = &MarsHeader{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *MarsRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Body = v
}
  return nil
}

func (p *MarsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MarsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MarsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("apiname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:apiname: ", p), err) }
  if err := oprot.WriteString(string(p.Apiname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.apiname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:apiname: ", p), err) }
  return err
}

func (p *MarsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("action", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:action: ", p), err) }
  if err := oprot.WriteI64(int64(p.Action)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.action (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:action: ", p), err) }
  return err
}

func (p *MarsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:header: ", p), err) }
  return err
}

func (p *MarsRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("body", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:body: ", p), err) }
  if err := oprot.WriteString(string(p.Body)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.body (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:body: ", p), err) }
  return err
}

func (p *MarsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MarsRequest(%+v)", *p)
}

// Attributes:
//  - Code
//  - Msg
//  - Data
type MarsResponse struct {
  Code int32 `thrift:"code,1,required" db:"code" json:"code"`
  Msg string `thrift:"msg,2,required" db:"msg" json:"msg"`
  Data *string `thrift:"data,3" db:"data" json:"data,omitempty"`
}

func NewMarsResponse() *MarsResponse {
  return &MarsResponse{}
}


func (p *MarsResponse) GetCode() int32 {
  return p.Code
}

func (p *MarsResponse) GetMsg() string {
  return p.Msg
}
var MarsResponse_Data_DEFAULT string
func (p *MarsResponse) GetData() string {
  if !p.IsSetData() {
    return MarsResponse_Data_DEFAULT
  }
return *p.Data
}
func (p *MarsResponse) IsSetData() bool {
  return p.Data != nil
}

func (p *MarsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCode bool = false;
  var issetMsg bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetCode = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetMsg = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"));
  }
  if !issetMsg{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"));
  }
  return nil
}

func (p *MarsResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *MarsResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *MarsResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Data = &v
}
  return nil
}

func (p *MarsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MarsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MarsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *MarsResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err) }
  return err
}

func (p *MarsResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := oprot.WriteString(string(*p.Data)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.data (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *MarsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MarsResponse(%+v)", *p)
}

