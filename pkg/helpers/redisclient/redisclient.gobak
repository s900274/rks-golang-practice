package redisclient

import (
	"errors"
	"fmt"
	"github.com/garyburd/redigo/redis"
	"helpers/cache"
	"helpers/dConnPool"
	"helpers/dConnPool/redigo"
	"strconv"
	"time"
)

type RedisClient struct {

	// for pool
	pool         *redigo.DPool
	redissvr     []string
	redissvrcnt  int
	conntimeout  int
	readtimeout  int
	writetimeout int
	maxidle      int
	maxactive    int

	// for rc
	expiresecond int

	// key cache for expire
	keycache cache.Cache
}

func NewRedisClient(redissvr []string, conntimeout, readtimeout, writetimeout, maxidle, maxactive, expiresecond int, mcache cache.Cache) *RedisClient {

	rc := new(RedisClient)
	if rc == nil {
		return nil
	}

	redissvrcnt := len(redissvr)

	var factory redigo.PooledConnFactory = redigo.PooledConnFactory{
		ConnectTimeout: time.Duration(conntimeout) * time.Millisecond,
		ReadTimeout:    time.Duration(readtimeout) * time.Millisecond,
		WriteTimeout:   time.Duration(writetimeout) * time.Millisecond,
	}

	dpoolCfg := dpool.PoolConfig{MaxIdle: maxidle, MaxActive: maxactive, IdleTimeout: 300 * time.Second, MaxFails: 5}
	rc.pool = redigo.NewDPool(redissvr, factory, dpoolCfg)
	if rc.pool == nil {
		return nil
	}

	rc.keycache = mcache

	rc.redissvr = redissvr
	rc.redissvrcnt = redissvrcnt
	rc.conntimeout = conntimeout
	rc.readtimeout = readtimeout
	rc.writetimeout = writetimeout
	rc.maxidle = maxidle
	rc.maxactive = maxactive
	rc.expiresecond = expiresecond

	return rc
}

func (rc *RedisClient) Set(key, value string) error {
	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.String((c.Do("SET", key, value)))
	if err != nil {
		return err
	}

	// add redis key expire time.
	// ignore if error of expire command.
	//rc.Expire(key, rc.expiresecond)

	if reply == "OK" {
		return nil
	} else {
		return errors.New("redisclient: unexpected reply of set")
	}
}

func (rc *RedisClient) SetEx(key, value string , livetime int) error {

	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.String((c.Do("SET", key, value)))
	if err != nil {
		return err
	}

	// add redis key expire time.
	// ignore if error of expire command.
	rc.Expire(key, livetime)

	if reply == "OK" {
		return nil
	} else {
		return errors.New("redisclient: unexpected reply of set")
	}
}

func (rc *RedisClient) Get(key string) (string, error) {
	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.String(c.Do("GET", key))
	if err != nil {
		return "", err
	}
	return reply, nil
}

func (rc *RedisClient) SAdd(key, value string) error {
	c := rc.pool.Get()
	defer c.Close()

	cache_kv := fmt.Sprintf("%s#%s", key, value)
	if nil == rc.keycache || !rc.keycache.IsExist(cache_kv) {
		rc.keycache.Put(cache_kv, true, time.Minute)
		_, err := redis.Int((c.Do("SADD", key, value)))
		if err != nil {
			return err
		}
	}

	// add redis key expire time.
	// ignore if error of expire command.
	if nil == rc.keycache || !rc.keycache.IsExist(key) {
		rc.keycache.Put(key, true, time.Minute)
		rc.Expire(key, rc.expiresecond)
	}

	return nil

}

func (rc *RedisClient) SPop(key string) (string, error) {
	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.String(c.Do("SPOP", key))
	if err != nil {
		return "", err
	}
	return reply, nil
}

func (rc *RedisClient) SUnionstore(dkey, sakey, sbkey string) (int64, error) {
	c := rc.pool.Get()
	defer c.Close()

	count, err := redis.Int64((c.Do("SUNIONSTORE", dkey, sakey, sbkey)))
	if err != nil {
		return 0, err
	}

	// add redis key expire time.
	// ignore if error of expire command.
	rc.Expire(dkey, rc.expiresecond)

	return count, nil
}

func (rc *RedisClient) SMembers(key string) ([]string, error) {
	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.Strings(c.Do("SMEMBERS", key))
	if err != nil {
		return nil, err
	}

	return reply, nil
}

func (rc *RedisClient) ZAdd(key, value string, score int64) error {
	c := rc.pool.Get()
	defer c.Close()

	_, err := redis.Int((c.Do("ZADD", key, score, value)))
	if err != nil {
		return err
	}

	// add redis key expire time.
	// ignore if error of expire command.
	if nil == rc.keycache || !rc.keycache.IsExist(key) {
		rc.keycache.Put(key, true, time.Minute)
		rc.Expire(key, rc.expiresecond)
	}

	return nil

}

func (rc *RedisClient) Setnx(key, value string) error {
	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.Int((c.Do("SETNX", key, value)))
	if err != nil {
		return err
	}

	// add redis key expire time.
	// ignore if error of expire command.
	rc.Expire(key, rc.expiresecond)

	if reply == 1 {
		return nil
	} else {
		return errors.New("redisclient: setnx fail of key exist")
	}
}

func (rc *RedisClient) Expire(key string, expiresecond int) error {
	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.Int(c.Do("EXPIRE", key, expiresecond))
	if err != nil {
		return err
	}

	if reply == 1 {
		return nil
	} else {
		return errors.New("redisclient: unexpected reply of expire")
	}
}

func (rc *RedisClient) Del(key string) error {
	c := rc.pool.Get()
	defer c.Close()

	_, err := redis.Int(c.Do("DEL", key))
	if err != nil {
		return err
	}
	//	if reply == 1 {
	//		return nil
	//	} else {
	// reply为0时说明key不存在
	//		return errors.New("redisclient: unexpected reply of del")
	//	}
	return nil
}

func (rc *RedisClient) ZRange(key string, start, stop int) ([]string, error) {
	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.Strings(c.Do("ZRANGE", key, start, stop))
	if err != nil {
		return nil, err
	}

	return reply, nil
}

func (rc *RedisClient) ZRangeWithScores(key string, start, stop int) (map[string]string, error) {
	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.StringMap(c.Do("ZRANGE", key, start, stop, "WITHSCORES"))
	if err != nil {
		return nil, err
	}

	return reply, nil
}

func (rc *RedisClient) ZRangeByScore(key string, min, max int64, minopen, maxopen bool) ([]string, error) {
	c := rc.pool.Get()
	defer c.Close()

	minstr := strconv.FormatInt(min, 10)
	maxstr := strconv.FormatInt(max, 10)
	if minopen {
		minstr = "(" + strconv.FormatInt(min, 10)
	}

	if maxopen {
		maxstr = "(" + strconv.FormatInt(max, 10)
	}

	if -1 == min {
		minstr = "-inf"
	}

	if -1 == max {
		maxstr = "+inf"
	}


	reply, err := redis.Strings(c.Do("ZRANGEBYSCORE", key, minstr, maxstr))
	if err != nil {
		return nil, err
	}

	return reply, nil
}

func (rc *RedisClient) ZRangeByScoreWithScores(key string, min, max int, minopen, maxopen bool) (map[string]string, error) {
	c := rc.pool.Get()
	defer c.Close()

	minstr := strconv.FormatInt(int64(min), 10)
	maxstr := strconv.FormatInt(int64(max), 10)
	if minopen {
		minstr = "(" + strconv.FormatInt(int64(min), 10)
	}

	if maxopen {
		maxstr = "(" + strconv.FormatInt(int64(max), 10)
	}

	reply, err := redis.StringMap(c.Do("ZRANGEBYSCORE", key, minstr, maxstr, "WITHSCORES"))
	if err != nil {
		return nil, err
	}

	return reply, nil
}

func (rc *RedisClient) HGetall(key string) (map[string]string, error) {
	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.StringMap(c.Do("HGETALL", key))
	if err != nil {
		return nil, err
	}

	return reply, nil
}

func (rc *RedisClient) HGet(key, subkey string) (string, error) {
	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.String(c.Do("HGET", key, subkey))
	if err != nil {
		return "", err
	}

	return reply, nil
}

func (rc *RedisClient) HSet(key, subkey, value string) error {
	c := rc.pool.Get()
	defer c.Close()

	_, err := redis.Int(c.Do("HSET", key, subkey, value))
	if err != nil {
		return err
	}

	// add redis key expire time.
	// ignore if error of expire command.
	rc.Expire(key, rc.expiresecond)

	// no need to check reply of HSET
	// reply == 1 means HSET key subkey value, subkey not exist
	// reply == 0 means HSET key subkey value, subkey exists, but the value is already modified.
	/*
		if reply == 1 {
			return nil
		} else {
			return errors.New("redisclient: unexpected reply of hset")
		}
	*/

	return nil
}

func (rc *RedisClient) Incr(key string) error {
	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.Int((c.Do("INCR", key)))
	if err != nil {
		return err
	}

	// add redis key expire time.
	// ignore if error of expire command.
	rc.Expire(key, rc.expiresecond)

	if reply >= 1 {
		return nil
	} else {
		return errors.New("redisclient: unexpected reply of incr")
	}
}

func (rc *RedisClient) IncrByfloat(key string, value float64) error {
	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.String(c.Do("INCRBYFLOAT", key, value))
	if err != nil {
		return err
	}

	// add redis key expire time.
	// ignore if error of expire command.
	rc.Expire(key, rc.expiresecond)

	if len(reply) >= 1 {
		return nil
	} else {
		return errors.New("redisclient: unexpected reply of IncrByfloat")
	}
}

func (rc *RedisClient) IncrBy(key string, value int64) error {
	c := rc.pool.Get()
	defer c.Close()

	_, err := redis.Int64(c.Do("INCRBY", key, value))
	if err != nil {
		return err
	}

	// add redis key expire time.
	// ignore if error of expire command.
	rc.Expire(key, rc.expiresecond)

	return nil
}

func (rc *RedisClient) ZRemRangeByScore(key string, min, max int64) (int64, error) {
	c := rc.pool.Get()
	defer c.Close()

	minstr := strconv.FormatInt(min, 10)
	maxstr := strconv.FormatInt(max, 10)

	if 0 == min {
		minstr = "-inf"
	}

	if -1 == max {
		maxstr = "+inf"
	}

	reply, err := redis.Int64(c.Do("ZREMRANGEBYSCORE", key, minstr, maxstr))
	if err != nil {
		return reply, err
	}

	return reply, nil
}

func (rc *RedisClient) ZRem(key string, member string) (int64, error) {
	c := rc.pool.Get()
	defer c.Close()

	reply, err := redis.Int64(c.Do("ZREM", key, member))
	if err != nil {
		return reply, err
	}

	return reply, nil
}


func (rc *RedisClient) ZCount(key string, min, max int64) (int64, error) {
	c := rc.pool.Get()
	defer c.Close()

	minstr := strconv.FormatInt(min, 10)
	maxstr := strconv.FormatInt(max, 10)

	if 0 == min {
		minstr = "-inf"
	}

	if -1 == max {
		maxstr = "+inf"
	}

	reply, err := redis.Int64(c.Do("ZCOUNT", key, minstr, maxstr))
	if err != nil {
		return reply, err
	}

	return reply, nil
}

func (rc *RedisClient) RPush(key , value string) error {
	c := rc.pool.Get()
	defer c.Close()

    _ ,	err := c.Do("RPUSH" , key , value)
	if err != nil {
		return err
	}
	return nil
}

func (rc *RedisClient) LRem(key string , count int64 , value string) (int64, error) {
	c := rc.pool.Get()
	defer c.Close()

	reply , err := redis.Int64(c.Do("LREM" , key , count , value))
	if err != nil {
		return reply , err
	}

	return reply , nil
}

func (rc *RedisClient) Lpop(key string) (string, error) {
	conn := rc.pool.Get()
	defer conn.Close()

	value, err := redis.String(conn.Do("LPOP", key))
	if err != nil {
		return "" , err
	}

	return value, nil
}

func (rc *RedisClient) GetPoolStats() (stats []dpool.PoolStats) {
	return rc.pool.GetPoolStats()
}
